"""
16*16 행렬의 형태로 만들어진 미로에서 흰색 바탕은 길, 노란색 바탕은 벽을 나타낸다.
가장 좌상단에 있는 칸을 (0, 0)의 기준으로 하여, 가로방향을 x 방향, 세로방향을 y 방향이라고 할 때,
미로의 시작점은 (1, 1)이고 도착점은 (13, 13)이다.
주어진 미로의 출발점으로부터 도착지점까지 갈 수 있는 길이 있는지 판단하는 프로그램을 작성하라.

[입력]
각 테스트 케이스의 첫 번째 줄에는 테스트 케이스의 번호가 주어지며, 바로 다음 줄에 테스트 케이스가 주어진다.
총 10개의 테스트케이스가 주어진다.
테스트 케이스에서 1은 벽을 나타내며 0은 길, 2는 출발점, 3은 도착점을 나타낸다.

[출력]
#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 도달 가능 여부를 1 또는 0으로 표시한다 (1 - 가능함, 0 - 가능하지 않음).

[실행 예시]
1
1111111111111111
1210000000100011
1010101110101111
1000100010100011
1111111010101011
1000000010101011
1011111110111011
1010000010001011
1010101111101011
1010100010001011
1010111010111011
1010001000100011
1011101111101011
1000100000001311
1111111111111111
1111111111111111

#1 1
"""

def bfs():
    go = [(si, sj)]

    while go:
        i, j = go.pop(0)
        for d in range(4):
            ni = i + di[d]
            nj = j + dj[d]
            if maps[ni][nj] != 1 and not visited[ni][nj]:
                visited[ni][nj] = True
                go.append((ni, nj))

        if visited[ei][ej]: return 1
    return 0


di = [0, 0, 1, -1]
dj = [1, -1, 0, 0]

for t in range(10):
    tc = input()
    maps = []
    for i in range(16):
        maps.append(list(map(int, input())))
        for j in range(16):
            if maps[i][j] == 2:
                si, sj = i, j
            elif maps[i][j] == 3:
                ei, ej = i, j
    visited = [[False]*16 for _ in range(16)]
    visited[si][sj] = True
    print("#{} {}".format(tc, bfs()))

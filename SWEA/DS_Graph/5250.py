"""
※ SW Expert 아카데미의 문제를 무단 복제하는 것을 금지합니다.
출발에서 최종 도착지까지 경유하는 지역의 높이 차이에 따라 연료 소비량이 달라지기 때문에,
최적의 경로로 이동하면 최소한의 연료로 이동할 수 있다.
항상 출발은 맨 왼쪽 위, 도착지는 가장 오른쪽 아래이며, 각 칸에서는 상하좌우 칸이 나타내는 인접 지역으로만 이동할 수 있다.
인접 지역으로 이동시에는 기본적으로 1만큼의 연료가 들고, 더 높은 곳으로 이동하는 경우 높이 차이만큼 추가로 연료가 소비된다.
이동 가능한 지역의 높이 정보에 따라 최소 연료 소비량을 출력하는 프로그램을 만드시오.

[입력]
첫 줄에 테스트 케이스의 개수 T가 주어지고, 테스트 케이스 별로 첫 줄에 표의 가로, 세로 칸수N, 다음 줄부터 N개 지역의 높이 H가 N개의 줄에 걸쳐 제공된다.
1<=T<=50, 3<=N<=100, 0<=H<1000

[출력]
각 줄마다 "#T" (T는 테스트 케이스 번호)를 출력한 뒤, 답을 출력한다.

입력
3
3
0 2 1
0 1 1
1 1 1
5
0 0 0 0 0
0 1 2 3 0
0 2 3 4 0
0 3 4 5 0
0 0 0 0 0
5
0 1 1 1 0
1 1 0 1 0
0 1 0 1 0
1 0 0 1 1
1 1 1 1 1
출력
#1 5
#2 8
#3 9
"""
from collections import deque

di = [0, 1, 0, -1]
dj = [1, 0, -1, 0]
for tc in range(int(input())):
    N = int(input())
    region = [list(map(int, input().split())) for _ in range(N)]
    ret = [[2048]*N for _ in range(N)]
    ret[0][0] = 0  # 시작점의 비용은 0
    Q = deque([(0, 0)])
    while Q:
        i, j = Q.popleft()
        for d in range(4):
            ni = i + di[d]
            nj = j + dj[d]
            if 0 <= ni < N and 0 <= nj < N:
                cost = max(0, region[ni][nj]-region[i][j]) + 1 + ret[i][j]  # 다음 칸 가는데 드는 비용
                if cost < ret[ni][nj]:  # 다음 칸에 갈 비용이 갱신되어있지 않거나 알고있던 것 보다 비싸면 갱신
                    ret[ni][nj] = cost
                    Q.append((ni, nj))  # 가격이 갱신된 칸 주변도 확인하기 위해 append
    print(f'#{tc+1} {ret[-1][-1]}')
